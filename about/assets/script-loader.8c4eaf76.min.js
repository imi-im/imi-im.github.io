class l{constructor(){this.loadedScripts={},this.disposed=!1}load(t,e){const s=this.loadedScripts[t];if(s)return s;const r=new Promise((i,o)=>{if(e.test()){i();return}this.renderScriptTag(t,e);const a=Date.now(),c=e.timeout||5e3,d=()=>{if(this.disposed){o("script loader is disposed");return}if(e.test()){i();return}if(Date.now()-a>c){o(`failed to load ${t} due to timeout`);return}window.requestAnimationFrame(d)};window.requestAnimationFrame(d)});return this.loadedScripts[t]=r,r.catch(i=>{console.error(`failed to load ${t}`),console.error(i),delete this.loadedScripts[t]}),r}renderScriptTag(t,e){const s=document.createElement("script");if(e?.attrs)for(const r in e.attrs){const i=e.attrs[r];s.setAttribute(r,i)}s.src=t,document.body.appendChild(s)}renderDom(t){this.renderScriptTag(t)}dispose(){this.loadedScripts={},this.disposed=!0}}export{l as S};
